<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
        <!ENTITY name      "appdata.backup.beta">
        <!ENTITY author    "Robin Kluth">
        <!ENTITY version   "2023.12.07b1">
        <!ENTITY sha256    "a60241865d05eb173d2c08be9d5217a1a6ffb7d4217584abaaef8df1d59e2a03">
        <!ENTITY launch    "Settings/AB.Beta.Main">
        <!ENTITY plugdir   "/usr/local/emhttp/plugins/&name;">
        <!ENTITY github    "Commifreak/unraid-appdata.backup">
        <!ENTITY pluginURL "https://raw.githubusercontent.com/&github;/master/&name;.plg">
        ]>

<PLUGIN name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" icon="shield"
        min="6.12" support="https://forums.unraid.net/topic/136995-pluginbeta-appdatabackup/">

    <CHANGES>
        <![CDATA[
        âž•New  ðŸ©¹Fix ðŸ”§Change

###2023.12.07b1
- âž• Container grouping

###2023.11.03b1
- âž• Global exclusion list
- âž• You can enable a notification for updated containers (disable by default)
- ðŸ©¹ `postBackup` script will now be executed after backup, before starting the container
- ðŸ”§ Raise a warning (instead of info) if container has NO volumes to backup
- ðŸ”§ Container updates are now handled directly after backing them up

]]>
    </CHANGES>


    <FILE Run="/bin/bash">
        <INLINE>
            OLDVERS=$(ls /boot/config/plugins/&name;/*.tgz 2>/dev/null | grep -v '&version;')
            if [ ! -z "$OLDVERS" ]
            then
            echo "Cleaning old archives..."
            rm $OLDVERS
            else
            echo "No cleanup of old plugin archive needed!"
            fi

            if [ -d "&plugdir;" ]
            then
            echo "Removing plugin files..."
            rm -rf &plugdir;
            else
            echo "Plugin files were not present. Fresh install"
            fi
            echo "Creating plugin files directory..."
            mkdir &plugdir;
        </INLINE>
    </FILE>

    <FILE Name="/boot/config/plugins/&name;/&name;-&version;.tgz">
        <URL>https://github.com/&github;/releases/download/&version;/&name;-&version;.tgz</URL>
        <SHA256>&sha256;</SHA256>
    </FILE>

    <FILE Run="/bin/bash">
        <INLINE>
            echo "Extracting plugin files..."
            tar -C &plugdir; -xzf /boot/config/plugins/&name;/&name;-&version;.tgz 2>&amp;1
        </INLINE>
    </FILE>

    <FILE Run="/bin/bash">
        <INLINE>
            # Because we used the wrong way for reloading cron, we should remove the old remnants...
            if [ -f "/etc/cron.d/appdata_backup_beta" ]; then
            rm /etc/cron.d/appdata_backup_beta
            echo "Found old cron file, refreshing it..."
            fi
            php &plugdir;/scripts/checkCron.php
        </INLINE>
    </FILE>

    <FILE Run="/bin/bash">
        <INLINE>
            echo Adapting some things, because this is beta
            rm &plugdir;/*.page
            cp &plugdir;/pages/*.page &plugdir;/pages/README.md &plugdir;
        </INLINE>
    </FILE>

    <FILE Run="/bin/bash">
        <INLINE>
            echo -n "&version;" > &plugdir;/version
        </INLINE>
    </FILE>

    <FILE Run="/bin/bash">
        <INLINE>
            echo ""
            echo "----------------------------------------------------"
            echo " &name; has been installed."
            echo " (previously known as ca.backup2)"
            echo ""
            echo " 2022-2023, Robin Kluth"
            echo " Version: &version;"
            echo "----------------------------------------------------"
            echo ""
        </INLINE>
    </FILE>

    <!--
    The 'remove' script.
    -->
    <FILE Run="/bin/bash" Method="remove">
        <INLINE>
            echo "Uninstalling... ðŸ˜­ Maybe I see you again soon. Bye!"
            rm -rf &plugdir; 2>/dev/null
            rm -rf /boot/config/plugins/&name;
            update_cron # Let cron know, we removed the target files :P
            echo "Uninstall done."
        </INLINE>
    </FILE>
</PLUGIN>
